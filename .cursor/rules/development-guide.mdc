---
description: Standards for Next.js 15 components, API endpoints, and project structure
globs:
  - app/**/*
  - components/**/*
  - lib/**/*
alwaysApply: true
---

Frontend components
- Use Tailwind CSS for styling with semantic tokens (`bg-background`, `text-foreground`).
- Use `tw-animate-css` for animations; prefer `animate-*` utilities.
- Structure:
  1) Props interface/type at top
  2) Server Component by default; add `'use client'` only when needed
  3) Default export component
- Use `cn()` from [lib/utils.ts](mdc:lib/utils.ts) to merge Tailwind classes.
- Use `next/image` and `next/link` over raw `<img>`/`<a>`.
- Accessibility: provide appropriate aria-* for interactive elements.

API endpoints
- Validate all inputs with zod; export types from schemas.
- Define explicit response schemas; do not return any.
- Use Next.js App Router conventions in `app/api/*`.
- Centralize error handling; return consistent error shapes.

TypeScript and imports
- Strict typing enabled in [tsconfig.json](mdc:tsconfig.json). Avoid `any`.
- ESM only. Prefer `import`/`export`; do not use `require`.
- Absolute imports via alias `@/*` from [tsconfig.json](mdc:tsconfig.json).
- Example: `import { cn } from "@/lib/utils"`

Project structure
- Entry points: [app/layout.tsx](mdc:app/layout.tsx), [app/page.tsx](mdc:app/page.tsx), [app/globals.css](mdc:app/globals.css)
- Configuration: [next.config.ts](mdc:next.config.ts), [tsconfig.json](mdc:tsconfig.json), [eslint.config.mjs](mdc:eslint.config.mjs)
- Utilities: [lib/utils.ts](mdc:lib/utils.ts), [components.json](mdc:components.json)
- Scripts: `npm run dev` (Turbopack), `npm run build`, `npm run lint`

