---
description: Project structure for Next.js 15 App Router
globs:
alwaysApply: false
---
# Project Structure Guide

## Next.js App Router Structure

This is a Next.js 15 project using the App Router pattern with TypeScript and Tailwind CSS.

### Key Files and Directories

- **Entry Point**: [app/layout.tsx](mdc:app/layout.tsx) - Root layout with font configuration and metadata
- **Main Page**: [app/page.tsx](mdc:app/page.tsx) - Homepage component
- **Global Styles**: [app/globals.css](mdc:app/globals.css) - Global CSS with Tailwind directives
- **Configuration**: [next.config.ts](mdc:next.config.ts) - Next.js configuration
- **Package Config**: [package.json](mdc:package.json) - Dependencies and scripts
- **TypeScript Config**: [tsconfig.json](mdc:tsconfig.json) - TypeScript configuration

### Routes and Groups

- Use route groups to organize features without affecting URL structure, e.g., `app/(auth)/login`, `app/(marketing)/about`.
- Co-locate page-specific components under the route directory in `app/**/components/` when they are not shared globally.
- Keep shared, reusable UI in `components/` at the repo root.

### API Routes

- Server endpoints live under `app/api/**/route.ts`.
- Keep route handlers small; push business logic into `lib/` services to enable reuse and testing.

### Utility Functions

- **Utils**: [lib/utils.ts](mdc:lib/utils.ts) - Contains the `cn()` utility function for merging Tailwind classes
- **Components Config**: [components.json](mdc:components.json) - shadcn/ui configuration with path aliases

### Public Assets

- **Static Files**: [public/](mdc:public) - Contains SVG icons and static assets

### Path Aliases

- Use the `@/*` alias defined in `tsconfig.json` for internal imports.
- Do not use relative paths that traverse more than two levels (e.g., avoid `../../../` where alias is available).

## Development Commands

- `npm run dev` - Start development server with Turbopack
- `npm run build` - Build for production
- `npm run start` - Start production server
- `npm run lint` - Run ESLint

## Testing and CI

- `npm run typecheck` - TypeScript type checking
- `npm run test` - Unit tests (Vitest)
- `npm run test:e2e` - E2E tests (Playwright)
- CI must run: typecheck, lint, unit tests, and build.

## Technology Stack

- **Framework**: Next.js 15 with App Router
- **Language**: TypeScript
- **Styling**: Tailwind CSS v4
- **UI Components**: shadcn/ui with Lucide icons
- **Fonts**: Geist Sans and Geist Mono from Google Fonts